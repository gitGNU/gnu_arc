- c-compile: extend.  Add more compiler-flag abstractions

- java-compile: extend.  Support more compiler-flags.  Compare different
  compilers (javac, jikes, kopi, etc.) to support a generic api for all.

- implement dependency control for the java compiler.

- implement a ":depends" keyword on the "arc:deps" task.  This will make
  .dep files depend on the source files!

- scan the tasks and apply the new arc:try/arc:throw mechanism to them.
  Make sure that tasks don't continue, when prerequisites (missing params,
  etc) aren't met.  throw an exceptions...!

- extend the orange tasks

- add the missing cvs functions to task-cvs: add, commit, remove, tag

- design a 'task-build': this checksout a module from cvs into a temporary
  directory, calls a arcfile in this module with default task 'all'; if
  that was successfull increase a build number in that local working copy,
  check that build number in.

  needs the following tasks:

  - call arc (in another directory)
  
- need a cool way to parse settings from a arc.config file to the C
  compiler (as -Dxxx=value pairs).  Or better: generate a config.h file and
  parse in the -DHAVE_CONFIG_H key; all the settings would then be
  generated in the config.h file.  this would allow to combine arc with
  autoconf.

- strip symbols from installed binaries



- implement the cond, case, begin expressions in meta.scm.

- support list of operating system in statement conditions:

(stmt os: 'linux ...)

   or:

(stmt os: '(bsd linux sunos) ...)


- add an "exclude:" argument to task-fileset, like:

(fileset pattern: "src/*.h"
         exclude: "src/version.h")

  i.e. include all .h-files in src except for "version.h"



- think about an companion system 'arcconfig'.  this takes an Arcreq file
  (a Arc requisites file), where all system requirements and diverse
  information is stated: something in the form:

(test libs
      os: 'linux
      (check-lib pthread-lib
                 libs: '("pthread"))
      (check-lib gc-lib
                 libs: '("gc")
                 depends: '("pthread")) )

(test headers
      os: 'linux
      (or (check-header gc-h
                        file: '("gc.h"))
          (check-header gc-gc-h
                        file: '("gc/gc.h"))))

(process
   (let ((values (make-alist "HAVE_GC_H" (if gc-h "1" "0")
                             "HAVE_GC_GC_H" (if gc-gc-h "1" "0"))))
     (filter src: "config.h.in"
             dest: "config.h"
             values: values))

   (output-arc-config))

This systems works in two steps: first the arc machine loads a global
database configuration, which may be kept up to date by the system admin.
The local Arcreq tests are only done, when no default is setup in the
global database.  In this way, common resource are not necessarily needed
to be scanned over and over again.

- (test ...) expressions have properties (like statements).  The may be
  conditioned by the operating system [if we know, we're having a given
  situation on win32, we don't need to check for everything.]

- the are are given checks, like check-lib, check-header, check-behaviour,
  check-command.  They set a property in the local property-map.  This
  property map is exported after a successful run as "arc.config"


     