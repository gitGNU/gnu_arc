;;  This file is part of the arc package
;;  Copyright (C) 2002, 2003 by Gregor Klinke
;;
;;  This library is free software; you can redistribute it and/or modify it
;;  under the terms of the GNU Lesser General Public License as published
;;  by the Free Software Foundation; either version 2.1 of the License, or
;;  (at your option) any later version.
;;
;;  This library is distributed in the hope that it will be useful, but
;;  WITHOUT ANY WARRANTY; without even the implied warranty of
;;  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
;;  Lesser General Public License for more details.
;;
;;  You should have received a copy of the GNU Lesser General Public
;;  License along with this library; if not, write to the Free Software
;;  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA

;; $Id: task-c-compile-linux.scm,v 1.2 2003/04/12 23:49:41 eyestep Exp $


(arc:provide 'task-c-compile-linux)

(arc:log 'debug "loading 'c-compile-linux' task")


;; backend functionality for compilation and c file dependency control on
;; linux systems.  Since linux system comes by default with the gcc
;; compiler, this class assumes gcc compilation.  C-file dependencies are
;; generated by gcc too, so there's no need for a special class here.
(define <arc:linux-c-compile>
  (arc:make-class 
   '<arc:linux-c-compile>          ; name of the class
   <arc:object>
   '((os linux))                   ; slots
   
   ;; methods
   `((os ,(lambda (self) linux))
     
     ;; compiler command
     (compiler-cmd ,(lambda (self) "gcc"))
     
     ;; makedeps command
     (makedeps-cmd ,(lambda (self) "gcc"))

     ;; default definitions
     (default-defs ,(lambda (self) ""))
     
     ;; default includes
     (default-incls ,(lambda (self) ""))
     
     ;; default flags
     (default-flags ,(lambda (self) ""))
     
     ;; flag for compiling dependencies
     (deps-flag ,(lambda (self) "-M"))
     
     ;; returns the compiler flag for optimization
     (opt-level-flag ,(lambda (self level)
                        (case level
                          ((high) "-O3")
                          ((medium) "-O2")
                          ((low) "")
                          (else ""))))
     (ansi-flag ,(lambda (self) "-ansi"))
     (debug-flag ,(lambda (self) "-g"))
     (signed-char-flag ,(lambda (self) "-signed-char"))
     (unsigned-char-flag ,(lambda (self) "-unsigned-char"))
     
     (shared-obj-flag ,(lambda (self) "-fpic -DPIC"))
     
     (warn-level-flag 
      ,(lambda (self level)
         (case level
           ((high) "-Wall")
           ((medium) (string-append "-Wqual "
                                    "-Wmissing-prototypes "
                                    "-Wimplicit "
                                    "-Winline "
                                    "-Wredundant-decls "
                                    "-Wformat "
                                    "-Wenum-clash "
                                    "-Wuninitialized"))
           ((low) "-Wcast-qual -Wmissing-prototypes")
           (else ""))))
     
     (outfile-flag ,(lambda (self) "-o"))
     (compile-only-flag ,(lambda (self) "-c"))
     
     (objfile-ext ,(lambda (self) "o"))
     (shared-objfile-ext ,(lambda (self) "lo"))
     
     
     (make-objfile-name 
      ,(lambda (self filename outdir objext)
         (let* ((pn (arc:string->path filename))
                (on* (arc:path-replace-last-ext 
                      pn 
                      (or objext 
                          (self 'objfile-ext)))))
           (arc:path->string
            (if (and outdir (not (null? outdir)))
                (arc:path-append (arc:string->path outdir)
                                 (arc:path-last-comp on*))
                on*)))))
     
     
     (compile-file 
      ,(lambda (self sfile ofile cincs cflags)
         (let ((cmd-str (string-append 
                         (self 'compiler-cmd) " "
                         (self 'default-defs) " "
                         (self 'default-incls) " "
                         cincs " "                      ; custom includes
                         (self 'default-flags) " "
                         cflags " "                     ; custom cflags
                         (self 'compile-only-flag) " "  ; compile only
                         (self 'outfile-flag) " " 
                         ofile " "                      ; obj file
                         sfile     ; the source file
                         )))
           (arc:display cmd-str #\nl)
           (if (not (equal? (arc:sys.system cmd-str) 0))
               (if (not %arc:keep-going-on-errors%)
                   (quit))))))
     
     
     (makedeps 
      ,(lambda (self sfile cflags cincs outdir objext)
         (let* ((bn (arc:path-last-comp (arc:string->path sfile)))
                (tdf (arc:path->string
                      (arc:path-append (arc:deps-directory)
                                       (arc:path-replace-last-ext bn "d"))))
                (objf (self 'make-objfile-name sfile outdir objext))
                (dcmd (string-append (self 'makedeps-cmd) " "
                                     (self 'deps-flag) " "
                                     cflags " "
                                     cincs " "
                                     sfile " "
                                     "> " tdf)) )
           (arc:display dcmd #\nl)
           (if (equal? (arc:sys.system dcmd) 0)
               (let* ((deps (arc:parse-make-deps-file tdf)))
                 ;; set the correct object target
                 (set-car! deps objf)
                 (arc:sys.remove-file tdf)
                 deps)
               #f))))
     )))


;;Keep this comment at the end of the file 
;;Local variables:
;;mode: scheme
;;End:

