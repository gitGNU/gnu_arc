;;  This file is part of the arc package
;;  Copyright (C) 2002, 2003 by Gregor Klinke
;;
;;  This library is free software; you can redistribute it and/or modify it
;;  under the terms of the GNU Lesser General Public License as published
;;  by the Free Software Foundation; either version 2.1 of the License, or
;;  (at your option) any later version.
;;
;;  This library is distributed in the hope that it will be useful, but
;;  WITHOUT ANY WARRANTY; without even the implied warranty of
;;  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
;;  Lesser General Public License for more details.
;;
;;  You should have received a copy of the GNU Lesser General Public
;;  License along with this library; if not, write to the Free Software
;;  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA

;; $Id: task-objc-compile.scm,v 1.1 2003/04/12 00:39:29 eyestep Exp $

(arc:provide 'task-objc-compile)
(arc:require 'task-c-compile)
(arc:require 'task-c-deps)


(arc:log 'debug "loading 'objc-compile' task")


;; settings for the gcc compiler
(define %arc:objc-compiler% 'gcc)
(define %arc:objc-gcc-libs% '("objc" "pthread"))
(define %arc:objc-gcc-wno-protocol-flag% "-Wno-protocol")

;; compiles a set of objective C files into object files.
;;
;; the majority of settings, e.g. which c compiler to use, which default
;; flags to specify, etc. should be set by a system configuration and read
;; in by the master arc-script (if available)
;;
;; keywords:
;;
;; :sources STRLIST
;; a list of c sourcefile names which should be compiled
;;
;; :flags STRING-LIST
;; a list of strings which should be added as flags to the C compiler; this
;; settings depend on the real compiler used, so should be used with care,
;; to ensure portability
;;
;; :includes STRING-LIST
;; a list of additional include directories
;;
;; :depends DEPENDENCIES
;; a list of dependencies as generated by the c-deps task (see there).
;; this target is optional and should normally not be used; if it is missing
;; the dependencies are calculated automatically from the sources
;;
;; :debug? BOOLEAN
;; indicates whether debug information should be compiled in. (default is #f)
;;
;; :ansi? BOOLEAN
;; indicates whether the c compiler should treat the code as pure ansi
;; C. (default is #f)
;;
;; :signed-char? BOOLEAN
;; indicates whether the c compiler should treat chars as signed (default is #f)
;;
;; :warn-level (all|no)
;; specifies the warn level to use.  
;;
;; :opt-level (high|medium|no)
;; specifies the optimization level to be used by the compiler
;;
;; :outdir STRING
;; sets the directory to write the created object file to.  Optional, and
;; defaults to the base directory of the source file
;;
;; :objext STRING
;; sets the object extension to use; optional and defaults to ".o"
;; 
;; :shared? BOOLEAN
;; should the object files be compiled for a shared library? Defaults to
;; #f.  Settings this property to #t, sets the :objext property
;; automatically to .lo (linkable object), until :objext is set explicitly.
;; This is to be able to keep shared and non shared objects in the same
;; output directory.  On platforms where objects for shared library are
;; identical to those for static libraries this may result in double
;; compilation.
;;
;; :warn-protocol? BOOLEAN
;; should warn about not completely implemented protocols or not
;;
;; the return value is a list of all object files controlled by this task

(define arc:objc-compile-keywords 
  (append arc:c-compile-keywords
          '((warn-protocol? boolean optional))))

(define (arc:objc-compile props body)
  (let* ((warn-protocol (arc:aval 'warn-protocol? props #f))
         (av (arc:attrval)))

    ;; for the time being support only for the GCC objective C compiler

    (case %arc:objc-compiler%
      ((gcc) 
       (begin
         ;; since gcc objective accepts the normal C flags (etc.) simply call
         ;; the task-c-compiler
         (set! av 
               (arc:call-task 'c-compile
                              (arc:aval->mlist props)
                              #f))

;;; @old                                         
;               (arc:c-compile ':sources (arc:aval ':sources props ())
;                              ':debug? (arc:aval ':debug? props #f)
;                              ':ansi? (arc:aval ':ansi? props #f)
;                              ':signed-char? (arc:aval ':signed-char? props #f)
;                              ':warn-level (arc:aval ':warn-level props 'high)
;                              ':opt-level (arc:aval ':opt-level props 'medium)
;                              ':flags (arc:aval ':flags props ())
;                              ':includes (arc:aval ':includes props ())
;                              ':outdir (arc:aval ':outdir props #f)
;                              ':objext (arc:aval ':objext props "o")
;                              ':sobjext (arc:aval ':sobjext props "lo")
;                              ':shared? (arc:aval ':shared? props #f)
;                              ':static? (arc:aval ':static? props #t)
;                              ':depends (arc:aval ':depends props ())))
         (arc:attrval-set! av 'dep-libs %arc:objc-gcc-libs%)
         av))
      (else (begin
              (arc:log 'error "unknown objective C compiler")
              () ))) ))

(arc:register-task 'objc-compile arc:objc-compile arc:objc-compile-keywords)


;;Keep this comment at the end of the file 
;;Local variables:
;;mode: scheme
;;End:
